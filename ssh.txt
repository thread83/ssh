-------------------------------------------------------------------------------
# Протокол SSH

<!-- MarkdownTOC levels="2,3" autolink="true" uri_encoding="false" markdown_preview="github" -->

- [1. Введение в SSH](#1-%D0%B2%D0%B2%D0%B5%D0%B4%D0%B5%D0%BD%D0%B8%D0%B5-%D0%B2-ssh)
    - [1.1. IP адрес](#11-ip-%D0%B0%D0%B4%D1%80%D0%B5%D1%81)
    - [1.2. Использование SSH](#12-%D0%B8%D1%81%D0%BF%D0%BE%D0%BB%D1%8C%D0%B7%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5-ssh)
- [2. Ключи авторизации](#2-%D0%BA%D0%BB%D1%8E%D1%87%D0%B8-%D0%B0%D0%B2%D1%82%D0%BE%D1%80%D0%B8%D0%B7%D0%B0%D1%86%D0%B8%D0%B8)
    - [2.1. Создание ключей](#21-%D1%81%D0%BE%D0%B7%D0%B4%D0%B0%D0%BD%D0%B8%D0%B5-%D0%BA%D0%BB%D1%8E%D1%87%D0%B5%D0%B9)
    - [2.2. Работа с ключами](#22-%D1%80%D0%B0%D0%B1%D0%BE%D1%82%D0%B0-%D1%81-%D0%BA%D0%BB%D1%8E%D1%87%D0%B0%D0%BC%D0%B8)
    - [2.3. Ключи сервера](#23-%D0%BA%D0%BB%D1%8E%D1%87%D0%B8-%D1%81%D0%B5%D1%80%D0%B2%D0%B5%D1%80%D0%B0)
    - [2.4. Удаление ключей клиентом](#24-%D1%83%D0%B4%D0%B0%D0%BB%D0%B5%D0%BD%D0%B8%D0%B5-%D0%BA%D0%BB%D1%8E%D1%87%D0%B5%D0%B9-%D0%BA%D0%BB%D0%B8%D0%B5%D0%BD%D1%82%D0%BE%D0%BC)
- [3. ssh-agent](#3-ssh-agent)
- [4. Ошибки при подключении](#4-%D0%BE%D1%88%D0%B8%D0%B1%D0%BA%D0%B8-%D0%BF%D1%80%D0%B8-%D0%BF%D0%BE%D0%B4%D0%BA%D0%BB%D1%8E%D1%87%D0%B5%D0%BD%D0%B8%D0%B8)
- [5. Настройка SSH сервера](#5-%D0%BD%D0%B0%D1%81%D1%82%D1%80%D0%BE%D0%B9%D0%BA%D0%B0-ssh-%D1%81%D0%B5%D1%80%D0%B2%D0%B5%D1%80%D0%B0)
    - [5.1. Создание сервера](#51-%D1%81%D0%BE%D0%B7%D0%B4%D0%B0%D0%BD%D0%B8%D0%B5-%D1%81%D0%B5%D1%80%D0%B2%D0%B5%D1%80%D0%B0)
    - [5.2. Локальное подключение](#52-%D0%BB%D0%BE%D0%BA%D0%B0%D0%BB%D1%8C%D0%BD%D0%BE%D0%B5-%D0%BF%D0%BE%D0%B4%D0%BA%D0%BB%D1%8E%D1%87%D0%B5%D0%BD%D0%B8%D0%B5)
    - [5.3. Удалённое подключение](#53-%D1%83%D0%B4%D0%B0%D0%BB%D1%91%D0%BD%D0%BD%D0%BE%D0%B5-%D0%BF%D0%BE%D0%B4%D0%BA%D0%BB%D1%8E%D1%87%D0%B5%D0%BD%D0%B8%D0%B5)
    - [5.4. Конфигурация сервера](#54-%D0%BA%D0%BE%D0%BD%D1%84%D0%B8%D0%B3%D1%83%D1%80%D0%B0%D1%86%D0%B8%D1%8F-%D1%81%D0%B5%D1%80%D0%B2%D0%B5%D1%80%D0%B0)
    - [5.5. Отключение сервера](#55-%D0%BE%D1%82%D0%BA%D0%BB%D1%8E%D1%87%D0%B5%D0%BD%D0%B8%D0%B5-%D1%81%D0%B5%D1%80%D0%B2%D0%B5%D1%80%D0%B0)

<!-- /MarkdownTOC -->

-------------------------------------------------------------------------------
## 1. Введение в SSH

**SSH (secure shell)** — сетевой протокол, обеспечивающий функции шелла на удалённой машине через безопасный канал. 

- безопасность обеспечивается аутентификацией пользователя/хоста, шифрованием и целостностью данных. Это даёт защиту от подслушивания (eavesdropping), DNS/IP spoofing, подделки данных (data forgery), перехвата соединения (connection hijacking) и т. д.
- есть две реализации SSH: частная коммерческая и бесплатная свободная (openssh). Они содержат почти одинаковый набор команд.
- для аутентификации сервера в SSH используется протокол аутентификации сторон на основе алгоритмов электронно-цифровой подписи RSA или DSA, но допускается также аутентификация при помощи пароля.
- на Windows используют PuTTY, Xshell или OpenSSH (по-умолчанию) клиенты.
- [подробный обзор](https://www.digitalocean.com/community/tutorials/ssh-essentials-working-with-ssh-servers-clients-and-keys) работы с ssh.

### 1.1. IP адрес

IP (internet protocol) адреса — приватные и публичные (IPv4 и IPv6 — версии протокола). Приватные: 10.x.x.x, 172.16.x.x-172.31.x.x, 192.168.x.x.

Способы определения IP:
```
curl ifconfig.me                               : узнать свой публичный IP
ip a (или hostname -I | awk '{print $1}')      : узнать свой приватный IP
```

### 1.2. Использование SSH

Протокол SSH используют утилиты **ssh** и **scp** (scp также использует SCP (secure copy protocol) поверх SSH):

```
ssh <login>@<server_address> -p <port>         : войти на сервер (обычно 22 порт для ssh)
exit                                           : выйти c сервера

scp -P <port> <login>@<server>:<path1> <path2> : копировать сервер → клиент
scp -P <port> <path1> <login>@<server>:<path2> : копировать клиент → сервер
(Также можно исп-ть файловые менеджеры, например, filezilla)
```

Иногда возникает необходимость сравнить несколько файлов между собой. Для этого есть утилита **diff**:

```
diff <options> <file1> <file2>                                      : сравнить файлы
ssh <user>@<server> 'cat file1.txt' | diff - file2.txt > result.txt : сравнить файлы используя конвеер
```

-------------------------------------------------------------------------------
## 2. Ключи авторизации

Чтобы каждый раз не вводить пароль при подключении к серверу по ssh используют **ключи авторизации**. Ключ состоит из **открытой** и **закрытой** (или публичной и приватной) частей: закрытая помещается в домашний каталог машины клиента, открытая — в каталог пользователя на сервере. Во время авторизации клиент доказывает серверу, что владеет ключом.

### 2.1. Создание ключей

Свой ключ можно сгенерировать с помощью команды **ssh-keygen**, которая создаст `~/.ssh/id_rsa.pub` (открытый ключ, его копируют на сервер) и `~/.ssh/id_rsa` (закрытый ключ, держится в секрете). Скопировать же открытый ключ на сервер можно вручную или командой **ssh-copy-id user@server** (ключ копируется в файл `~/.ssh/authorized_keys` на сервере).

- `ssh-keygen -p`: смена парольной фразы для закрытого ключа клиента.
- [openNET](http://www.opennet.ru/man.shtml?topic=ssh-keygen&category=1) и [здесь](https://wiki.dieg.info/ssh): подробней про закрытый ключ

### 2.2. Работа с ключами

Для корректной работы с ключами авторизации необходимо правильно настроить для них права доступа ([здесь](https://vps.ua/wiki/change-permissions/) подробно). Закрытый ключ следует держать доступным для чтения и записи только для его владельца (600), открытый — доступен для чтения всем, для записи — только владельцу (644).

При первом подключении к серверу, ssh спрашивает, доверяете ли вы SSH-отпечатку открытого ключа самого сервера, который и хранится на нём в `/etc/ssh/ssh_host_rsa_key.pub`. После положительного ответа, отпечаток ключа сервера сохраняется в файл `~/.ssh/known_hosts` на машине клиента.

### 2.3. Ключи сервера

Ключи самого сервера хранятся в `/etc/ssh/ssh_host_rsa_key` и `/etc/ssh/ssh_host_rsa_key.pub`. Они генерируются с помощью **ssh-keygen**, также их можно скопировать со старого сервера на новый. Пароль для них задавать не нужно (ключ с паролем ssh-сервер использовать не сможет). При этом если необходимо клонировать сервер (например, в виртуалках), то ssh-ключи сервера нужно обязательно перегенерировать, а старые ключи из клиентского `known_hosts` при этом лучше убрать, иначе ssh будет ругаться на duplicate key.

### 2.4. Удаление ключей клиентом

1. Удалить отпечаток ключа сервера из `~/.ssh/known_hosts` на машине клиента:
```
ssh-keygen -R <server_name>
```
2. Удалить IP адрес сервера оттуда же:
```
ssh-keygen -R <server_IP>
```
3. Удалить ключи на машине клиента:
```
rm /.ssh/id_rsa
rm /.ssh/id_rsa.pub
```
4. Удалить упоминание о ключе пользователя с сервера из файла `~/.ssh/authorized_keys`.

-------------------------------------------------------------------------------
## 3. ssh-agent

Чтобы постоянно не использовать парольную фразу при работе на сервере, её можно сохранить и использовать автоматически, для этого есть **ssh-agent**. Он используется для шифрования закрытого ключа пользователя `~/.ssh/id_rsa` в виде:

```
-----BEGIN RSA PRIVATE KEY-----
Proc-Type: 4,ENCRYPTED
DEK-Info: AES-128-CBC,DABC832357D92162BB5FCA2826564471

yanGD1MBJnqXa78pmKm+0YVe4ENdml5V9/6KQojhkeAFG60iBovjmPLFkkRjbRi/
TAzrLHiPMnaZqyK4a+3jGihfA1DmbJYn/sDcbVa5vuDqlymNDKwPHI4ZWmKI9KvV
E6WPQ1x6kLkLTiFP1CviB6+0RtRdoV0v29PcKDFVFtdrAwrZJDaDzAUCL+/RWGsG
hw/9fA14nDSTl/WTR0kLXbBJ2L0PyTsEFerzgDD0Khr3oSzmGi0shnbXo4c7iif0
et00bRVcIXeTv+3FWPyjnerLLgy4mgSnGZ4WfNi86LQUd8fMDmaYPYZmKV+Wzk2I
a8nXUuxD5PV5vMnEc/ddJ6WY31IAs8gutaS9C0cBXULKDjOSB8ZRthMny5VgUJJ2
bJHWxG6M8yy6vnO5ZejYdkb0DafQkHr5hEyykVwRWyarB/Hc3SGOaQcznqgN1I6J
ZMmllQpA9Th0EpGRpGvRSneN/Svmkcrc39tOFbBiiQJ7OCvhM7is3ovrFrtdoJTK﻿

-----END RSA PRIVATE KEY-----
```

Работа с **ssh-agent**:

1. Создать ключи с помощью **ssh-keygen** вместе с парольной фразой (passphrase).
2. Запустить **ssh-agent** и сообщить ему о закрытом ключе.
```
eval `ssh-agent`
ssh-add ~/.ssh/id_rsa
```
3. Проверить, что ключ добавлен с помощью **ssh-add -l**.
4. Импортировать открытый ключ на сервер, используя **ssh-copy-id user@server**. После этого появится файл `~/.ssh/known_hosts` на машине клиента и для дальнейшего подключения на сервер открытый ключ `~/.ssh/id_rsa.pub` больше не нужен, его можно удалить.
5. Теперь при входе на сервер нужно будет разблокировать доступ к секретному ключу только один раз.

Агент работает до тех пор, пока не будет явно завершен вызовом **ssh-agent -k**, при этом должна быть доступна переменная окружения SSH_AGENT_PID, которая хранит PID агента. Если переменная не задана, то задать её вызовом **export SSH_AGENT_PID=#** (PID можно посмотреть в **ps**), или просто убить процесс.

-------------------------------------------------------------------------------
## 4. Ошибки при подключении

Если ключи авторизации были перенесены на новую машину, возможно появление ошибки **Permissions are too open**, связанной со слишком свободными правами доступа ключей. Для её решения необходимо просто изменить права доступа ключей и каталога, где они находятся (600 — закрытый ключ, 644 — открытый ключ, 700 — каталог).

-------------------------------------------------------------------------------
## 5. Настройка SSH сервера

### 5.1. Создание сервера

- создание учётной записи для гостевого пользователя 
- Linux:
    1. `sudo apt-get install openssh-server`
    2. `sudo systemctl status ssh` или `ps -A | grep sshd` (проверка)
- Windows:
    1. Apps & features → Manage optional features → Add OpenSSH server
    2. Services (службы) → Set to autostart on boot

### 5.2. Локальное подключение

1. Приватный IP: **ifconfig** или **ip a** (eth0: ethernet кабель, wlan: wifi).
2. **ssh -p 22 guest@privateIP**.

### 5.3. Удалённое подключение

1. Публичный IP: **curl ifconfig.me**.
2. Настроить роутер:
    - зайти на страницу админа
    - выбрать номер порта для ssh (22)
    - ввести приватный IP сервера
3. **ssh guest@publicIP**.

### 5.4. Конфигурация сервера

Файл конфигураций сервера: `/etc/ssh/sshd_config file`. Каждый раз при его изменении необходимо перезапускать сервер с помощью **sudo restart ssh**.

Некоторые настройки:
```
PasswordAuthentication yes/no : вход по паролю
Port 22                       : номер используемого порта
AllowUsers user1 user2 ...    : через какие учётные записи можно войти
PermitRootLogin No            : запретить рут доступ через ssh
MaxStartups N                 : макс число одновременных подключений к серверу
X11Forwarding yes/no          : графический интерфейс
AllowTcpForwarding yes/no     : перенаправление портов
```

[Ubuntu help](https://help.ubuntu.com/community/SSH/OpenSSH/Configuring)

### 5.5. Отключение сервера

1. Отключение:
```
sudo systemctl stop sshd.service sshd.socket
sudo systemctl disable sshd.socket
sudo systemctl disable sshd.service
```
2. Проверка: `sudo systemctl status ssh`

